/* The following code was generated by JFlex 1.4.3 on 17.03.14 15:16 */

package com.linkedin.intellij.dust;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.linkedin.intellij.dust.psi.DustTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.03.14 15:16 from the specification file
 * <tt>Dust.flex</tt>
 */
class DustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DUST_ATTR = 6;
  public static final int DUST_INDEX = 4;
  public static final int DUST_ATTR_STRING_SINGLE = 8;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 12;
  public static final int DUST_TAG = 2;
  public static final int DUST_ATTR_STRING_DOUBLE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\27\1\22"+
    "\1\3\1\25\2\0\1\24\3\0\1\11\2\0\1\21\1\12\12\26"+
    "\1\13\1\0\1\10\1\17\1\7\1\4\1\6\32\25\1\15\1\23"+
    "\1\16\1\5\1\25\1\0\32\25\1\2\1\20\1\14\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\6\0\1\1\1\2\1\3\1\1\1\2\1\3"+
    "\1\1\1\4\1\5\1\6\1\7\1\10\1\11\2\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\17"+
    "\1\20\1\17\1\2\1\17\1\3\1\0\1\1\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\1\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\33\1\34\1\0\1\17\3\0"+
    "\1\35\2\0\1\17\1\35\1\13\1\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138\0\360\0\360"+
    "\0\360\0\u0150\0\360\0\360\0\u0168\0\u0180\0\u0198\0\u01b0"+
    "\0\360\0\360\0\360\0\u01c8\0\u01e0\0\u01f8\0\360\0\u0210"+
    "\0\u0228\0\u0240\0\u0258\0\u0270\0\u0288\0\u0270\0\u0270\0\u0270"+
    "\0\u0270\0\u0270\0\u0270\0\u0270\0\u0270\0\u0270\0\360\0\u02a0"+
    "\0\360\0\360\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\360\0\360\0\u0168\0\360\0\u02b8\0\u0180\0\u02d0"+
    "\0\360\0\u02e8\0\u0300\0\u0168\0\u0180\0\u02e8\0\u0318\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\25\10\1\13\1\14\1\15\7\13"+
    "\1\16\1\17\1\20\1\21\1\13\1\22\1\23\1\24"+
    "\1\25\1\13\1\26\1\27\1\30\2\13\1\14\1\15"+
    "\13\13\1\31\6\13\1\27\1\30\2\13\1\14\1\15"+
    "\17\13\1\32\1\13\1\33\3\13\1\34\1\35\1\15"+
    "\11\34\1\13\6\34\1\36\1\37\3\34\1\40\1\41"+
    "\1\15\11\40\1\13\5\40\1\37\1\42\4\40\1\13"+
    "\1\14\1\43\25\13\2\10\1\0\26\10\1\11\1\0"+
    "\25\10\1\44\1\45\1\44\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\13\44\31\0"+
    "\1\14\27\0\1\60\1\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\30\0\1\72\35\0"+
    "\1\73\1\0\1\73\3\0\22\74\1\75\1\76\4\74"+
    "\23\77\1\100\1\101\3\77\25\0\2\27\22\0\1\102"+
    "\4\0\1\30\1\0\2\34\1\0\11\34\1\0\6\34"+
    "\1\36\1\0\4\34\1\35\1\0\11\34\1\0\6\34"+
    "\1\36\1\0\26\34\1\36\4\34\2\40\1\0\11\40"+
    "\1\0\5\40\1\0\1\42\5\40\1\41\1\0\11\40"+
    "\1\0\5\40\1\0\1\42\27\40\1\42\4\40\1\0"+
    "\1\60\1\0\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\13\0\1\103\14\44\1\57\14\44"+
    "\1\45\12\44\1\57\13\44\1\0\1\60\26\0\22\74"+
    "\1\104\1\76\4\74\23\77\1\100\1\105\3\77\26\0"+
    "\1\106\1\0\27\103\1\107\14\103\1\110\12\103\1\107";

  private static int [] zzUnpackTrans() {
    int [] result = new int[816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\6\0\3\1\1\11\3\1\3\11\1\1\2\11"+
    "\4\1\3\11\3\1\1\11\4\1\1\0\12\1\1\11"+
    "\1\1\13\11\1\0\1\11\3\0\1\11\2\0\3\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final String[] checks = {"\"","(",")","=","\\s", ";"};
  private static final String[] tagSymbols = {"#","?","^","@","<", ">", "+", "/", ":", "!"};

  private Stack<Integer> lexStateStack = new Stack<java.lang.Integer>();

  private void pushState(int state) {
    lexStateStack.push(yystate());
    yybegin(state);
  }

  private void popState() {
    if (lexStateStack.empty()) {
      yybegin(YYINITIAL);
    } else {
      yybegin(lexStateStack.pop());
    }
  }


  DustLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DustLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 78) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { popState(); return DustTypes.COMMENT;
          }
        case 31: break;
        case 16: 
          { popState();popState(); return DustTypes.STRING_END;
          }
        case 32: break;
        case 15: 
          { return DustTypes.STRING;
          }
        case 33: break;
        case 6: 
          { pushState(DUST_INDEX); return DustTypes.LB;
          }
        case 34: break;
        case 11: 
          { return DustTypes.NUMBER;
          }
        case 35: break;
        case 13: 
          { pushState(DUST_ATTR_STRING_DOUBLE); return DustTypes.STRING_START;
          }
        case 36: break;
        case 14: 
          { pushState(DUST_ATTR_STRING_SINGLE); return DustTypes.STRING_START;
          }
        case 37: break;
        case 27: 
          { popState(); return DustTypes.SLASH_RD;
          }
        case 38: break;
        case 25: 
          { pushState(DUST_TAG); return DustTypes.ELSE;
          }
        case 39: break;
        case 7: 
          { return DustTypes.EQUAL;
          }
        case 40: break;
        case 22: 
          { pushState(DUST_TAG); return DustTypes.INLINE_PARTIAL;
          }
        case 41: break;
        case 8: 
          { return DustTypes.PIPE;
          }
        case 42: break;
        case 5: 
          { popState(); return DustTypes.RD;
          }
        case 43: break;
        case 19: 
          { pushState(DUST_TAG); return DustTypes.NOT_EXISTANCE;
          }
        case 44: break;
        case 9: 
          { return DustTypes.PERIOD;
          }
        case 45: break;
        case 26: 
          { boolean isDustLD = true;

  if (yylength() > 2) {
    boolean isAllWhitespace = true;
    CharSequence cSeq = yytext();
    int size = cSeq.length();

    for (int i = 1; i < size - 1; i++) {
      if (!Character.isWhitespace(cSeq.charAt(i))) { isAllWhitespace = false; break; }
    }

    if (!isAllWhitespace) {
      while (yylength() > 1) {
          String c = yytext().subSequence(yylength() - 1, yylength()).toString();
          for (int i = 0; i < checks.length; i++) {
            if (c.equals(checks[i])) isDustLD = false;
          }
          if (yylength() == 2) {
            if (c.equals("#")) {
              pushState(DUST_TAG); return DustTypes.SECTION;
            } else if (c.equals("?")) {
              pushState(DUST_TAG); return DustTypes.EXISTANCE;
            } else if (c.equals("^")) {
              pushState(DUST_TAG); return DustTypes.NOT_EXISTANCE;
            } else if (c.equals("@")) {
              pushState(DUST_TAG); return DustTypes.HELPER;
            } else if (c.equals(">")) {
              pushState(DUST_TAG); return DustTypes.PARTIAL;
            } else if (c.equals("<")) {
              pushState(DUST_TAG); return DustTypes.INLINE_PARTIAL;
            } else if (c.equals("+")) {
              pushState(DUST_TAG); return DustTypes.BLOCK;
            } else if (c.equals("/")) {
              pushState(DUST_TAG); return DustTypes.CLOSE;
            } else if (c.equals(":")) {
              pushState(DUST_TAG); return DustTypes.ELSE;
            } else if (c.equals("!")) {
              pushState(COMMENT); yypushback(2); return DustTypes.COMMENT;
            } else if (c.equals(" ")) {
              return DustTypes.HTML;
            } else if (c.equals("\n")) {
              return DustTypes.HTML;
            }
          }
          yypushback(1);
      }
    } else {
      isDustLD = false;
    }
  } else {
    isDustLD = false;
  }


  if (isDustLD) {
    pushState(DUST_TAG); return DustTypes.LD;
  } else {
    return DustTypes.HTML;
  }
          }
        case 46: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 47: break;
        case 18: 
          { pushState(DUST_TAG); return DustTypes.EXISTANCE;
          }
        case 48: break;
        case 24: 
          { pushState(DUST_TAG); return DustTypes.CLOSE;
          }
        case 49: break;
        case 17: 
          { pushState(DUST_TAG); return DustTypes.SECTION;
          }
        case 50: break;
        case 29: 
          { return DustTypes.STRING_SINGLE;
          }
        case 51: break;
        case 12: 
          { popState(); return DustTypes.RB;
          }
        case 52: break;
        case 23: 
          { pushState(DUST_TAG); return DustTypes.BLOCK;
          }
        case 53: break;
        case 20: 
          { pushState(DUST_TAG); return DustTypes.HELPER;
          }
        case 54: break;
        case 1: 
          { return DustTypes.HTML;
          }
        case 55: break;
        case 21: 
          { pushState(DUST_TAG); return DustTypes.PARTIAL;
          }
        case 56: break;
        case 4: 
          { return DustTypes.COLON;
          }
        case 57: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushState(DUST_ATTR); return DustTypes.EQUAL;
          }
        case 58: break;
        case 3: 
          { pushState(DUST_TAG); return DustTypes.LD;
          }
        case 59: break;
        case 10: 
          { return DustTypes.IDENTIFIER;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
